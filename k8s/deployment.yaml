# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: "player-xpress"

---
# ConfigMap for ejabberd (vhost + full ejabberd.yml)
apiVersion: v1
kind: ConfigMap
metadata:
  name: ejabberd-config
  namespace: "player-xpress"
data:
  vhost: "ejabberd"
  ejabberd.yml: |
    ###
    ###              ejabberd configuration file
    ###
    ### The parameters used in this configuration file are explained at
    ###
    ###       https://docs.ejabberd.im/admin/configuration
    ###
    ### The configuration file is written in YAML.
    ### *******************************************************
    ### *******           !!! WARNING !!!               *******
    ### *******     YAML IS INDENTATION SENSITIVE       *******
    ### ******* MAKE SURE YOU INDENT SECTIONS CORRECTLY *******
    ### *******************************************************
    ### Refer to http://en.wikipedia.org/wiki/YAML for the brief description.
    ###



    define_macro:
      HOST: ejabberd
      ADMIN: "admin@ejabberd"
      PORT_C2S: 5222
      PORT_C2S_TLS: 5223
      PORT_S2S: 5269
      PORT_HTTP_TLS: 5443
      PORT_HTTP: 5280
      PORT_BROWSER: 1880
      PORT_STUN: 5478
      PORT_MQTT: 1883
      PORT_PROXY65: 7777

    hosts:
      - HOST

    loglevel: info

    certfiles:
      - /home/ejabberd/conf/server.pem

    ca_file: "/home/ejabberd/conf/cacert.pem"

    ## When using let's encrypt to generate certificates
    ##certfiles:
    ##  - /etc/letsencrypt/live/localhost/fullchain.pem
    ##  - /etc/letsencrypt/live/localhost/privkey.pem
    ##
    ##ca_file: "/etc/letsencrypt/live/localhost/fullchain.pem"

    disable_sasl_mechanisms:
      - "SCRAM-SHA-512-PLUS"
      - "SCRAM-SHA-256"
      - "SCRAM-SHA-256-PLUS"
      - "SCRAM-SHA-1"
      - "SCRAM-SHA-1-PLUS"

    listen:
      -
        port: PORT_C2S
        ip: "::"
        module: ejabberd_c2s
        max_stanza_size: 262144
        shaper: c2s_shaper
        access: c2s
        starttls_required: true
      -
        port: PORT_C2S_TLS
        ip: "::"
        module: ejabberd_c2s
        max_stanza_size: 262144
        shaper: c2s_shaper
        access: c2s
        tls: true
      -
        port: PORT_S2S
        ip: "::"
        module: ejabberd_s2s_in
        max_stanza_size: 524288
        shaper: s2s_shaper
      -
        port: PORT_HTTP_TLS
        ip: "::"
        module: ejabberd_http
        tls: true
        request_handlers:
          /admin: ejabberd_web_admin
          /api: mod_http_api
          /bosh: mod_bosh
          /captcha: ejabberd_captcha
          /upload: mod_http_upload
          /ws: ejabberd_http_ws
          /oauth: ejabberd_oauth
      -
        port: PORT_HTTP
        ip: "::"
        module: ejabberd_http
        request_handlers:
          /admin: ejabberd_web_admin
          /api: mod_http_api
          /bosh: mod_bosh
          /captcha: ejabberd_captcha
          /upload: mod_http_upload
          /ws: ejabberd_http_ws
          /oauth: ejabberd_oauth
      -
        port: PORT_BROWSER
        ip: "::"
        module: ejabberd_http
        request_handlers:
          /: ejabberd_web_admin
      -
        port: PORT_MQTT
        ip: "::"
        module: mod_mqtt
        backlog: 1000
      ##
      ## https://docs.ejabberd.im/admin/configuration/#stun-and-turn
      ## ejabberd_stun: Handles STUN Binding requests
      ##
      ##-
      ##  port: 3478
      ##  ip: "0.0.0.0"
      ##  transport: udp
      ##  module: ejabberd_stun
      ##  use_turn: true
      ##  turn_ip: "{{ IP }}"
      ##  auth_type: user
      ##  auth_realm: "example.com"
      ##-
      ##  port: 3478
      ##  ip: "0.0.0.0"
      ##  module: ejabberd_stun
      ##  use_turn: true
      ##  turn_ip: "{{ IP }}"
      ##  auth_type: user
      ##  auth_realm: "example.com"
      ##- 
      ##  port: 5349
      ##  ip: "0.0.0.0"
      ##  module: ejabberd_stun
      ##  certfile: "/home/ejabberd/conf/server.pem"
      ##  tls: true
      ##  use_turn: true
      ##  turn_ip: "{{ IP }}"
      ##  auth_type: user
      ##  auth_realm: "example.com"
      ##
      ## https://docs.ejabberd.im/admin/configuration/#sip
      ## To handle SIP (VOIP) requests:
      ##
      ##-
      ##  port: 5060
      ##  ip: "0.0.0.0"
      ##  transport: udp
      ##  module: ejabberd_sip
      ##-
      ##  port: 5060
      ##  ip: "0.0.0.0"
      ##  module: ejabberd_sip
      ##-
      ##  port: 5061
      ##  ip: "0.0.0.0"
      ##  module: ejabberd_sip
      ##  tls: true

    s2s_use_starttls: optional

    acl:
      local:
        user_regexp: ""
      loopback:
        ip:
          - 127.0.0.0/8
          - ::1/128
          - "::FFFF:172.17.0.1/128"
          - 0.0.0.0/0    # allow all IPv4
          - ::/0        # allow all IPv6
      admin:
        user: admin@ejabberd

    access_rules:
      local:
        allow: local
      c2s:
        deny: blocked
        allow: all
      announce:
        allow: admin
      configure:
        allow: admin
      muc_create:
        allow: local
      pubsub_createnode:
        allow: local
      trusted_network:
        allow: loopback

    api_permissions:
      "console commands":
        from: ejabberd_ctl
        who: all
        what: "*"
      "webadmin commands":
        from: ejabberd_web_admin
        who: admin
        what: "*"
      "admin access":
        who:
          access:
            allow:
              - acl: loopback
              - acl: admin
          oauth:
            scope: "ejabberd:admin"
            access:
              allow:
                - acl: loopback
                - acl: admin
        what:
          - "*"
          - "!stop"
          - "!start"
      "public commands":
        who:
          ip: 127.0.0.1/8
        what:
          - status
          - connected_users_number
          - register

    shaper:
      normal:
        rate: 3000
        burst_size: 20000
      fast: 100000

    shaper_rules:
      max_user_sessions: 10
      max_user_offline_messages:
        5000: admin
        100: all
      c2s_shaper:
        none: admin
        normal: all
      s2s_shaper: fast

    acme:
      contact: "mailto:example-admin@example.com"
      ca_url: "https://acme-staging-v02.api.letsencrypt.org/directory"

    modules:
      mod_adhoc: {}
      mod_admin_extra: {}
      mod_announce:
        access: announce
      mod_avatar: {}
      mod_blocking: {}
      mod_bosh: {}
      mod_caps: {}
      mod_carboncopy: {}
      mod_client_state: {}
      mod_configure: {}
      mod_disco: {}
      mod_fail2ban: {}
      mod_http_api: {}
      mod_http_upload:
        put_url: https://@HOST@:5443/upload
        custom_headers:
          "Access-Control-Allow-Origin": "https://@HOST@"
          "Access-Control-Allow-Methods": "GET,HEAD,PUT,OPTIONS"
          "Access-Control-Allow-Headers": "Content-Type"
      mod_last: {}
      mod_mam:
        ## Mnesia is limited to 2GB, better to use an SQL backend
        ## For small servers SQLite is a good fit and is very easy
        ## to configure. Uncomment this when you have SQL configured:
        ## db_type: sql
        assume_mam_usage: true
        default: always
      mod_mqtt: {}
      mod_muc:
        access:
          - allow
        access_admin:
          - allow: admin
        access_create: muc_create
        access_persistent: muc_create
        access_mam:
          - allow
        default_room_options:
          allow_subscription: true  # enable MucSub
          mam: true
      mod_muc_admin: {}
      mod_muc_occupantid: {}
      mod_offline:
        access_max_user_messages: max_user_offline_messages
      mod_ping: {}
      mod_privacy: {}
      mod_private: {}
      mod_proxy65:
        access: local
        max_connections: 5
        port: PORT_PROXY65
      mod_pubsub:
        access_createnode: pubsub_createnode
        plugins:
          - flat
          - pep
        force_node_config:
          ## Avoid buggy clients to make their bookmarks public
          storage:bookmarks:
            access_model: whitelist
      mod_push: {}
      mod_push_keepalive: {}
      mod_register:
        ## Only accept registration requests from the "trusted"
        ## network (see access_rules section above).
        ## Think twice before enabling registration from any
        ## address. See the Jabber SPAM Manifesto for details:
        ## https://github.com/ge0rg/jabber-spam-fighting-manifesto
        ip_access: all
      mod_roster:
        versioning: true
      mod_sip: {}
      mod_s2s_bidi: {}
      mod_s2s_dialback: {}
      mod_shared_roster: {}
      mod_stream_mgmt:
        resend_on_timeout: if_offline
      mod_vcard: {}
      mod_vcard_xupdate: {}
      mod_version:
        show_os: false


    ### Local Variables:
    ### mode: yaml
    ### End:
    ### vim: set filetype=yaml tabstop=8
  
---
# ejabberd Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chat-ejabberd-deployment
  namespace: "player-xpress"
  labels:
    app: ejabberd
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ejabberd
  template:
    metadata:
      labels:
        app: ejabberd
    spec:
      containers:
        - name: ejabberd
          image: registry.deti/player-xpress/chat_ejabberd:v1
          imagePullPolicy: IfNotPresent
          env:
            - name: ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: ejabberd-secrets
                  key: admin-user
            - name: ADMIN_USERNAME
              valueFrom:
                secretKeyRef:
                  name: ejabberd-secrets
                  key: admin-username
            - name: ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ejabberd-secrets
                  key: admin-password
            - name: VHOST
              valueFrom:
                configMapKeyRef:
                  name: ejabberd-config
                  key: vhost
            - name: TINI_SUBREAPER
              value: "1"
          ports:
            - name: c2s
              containerPort: 5222
            - name: s2s
              containerPort: 5269
            - name: http
              containerPort: 5280
            - name: http-tls
              containerPort: 5443
          resources:
            requests:
              cpu:    "100m"
              memory: "128Mi"
            limits:
              cpu:    "500m"
              memory: "512Mi"
          volumeMounts:
            - name: ejabberd-config-volume
              mountPath: /home/ejabberd/conf/ejabberd.yml
              subPath: ejabberd.yml
      volumes:
        - name: ejabberd-config-volume
          configMap:
            name: ejabberd-config
            items:
              - key: ejabberd.yml
                path: ejabberd.yml

---
# ejabberd Service
apiVersion: v1
kind: Service
metadata:
  name: ejabberd-service
  namespace: "player-xpress"
spec:
  selector:
    app: ejabberd
  ports:
    - name: c2s
      port: 5222
      targetPort: 5222
    - name: s2s
      port: 5269
      targetPort: 5269
    - name: http
      port: 5280
      targetPort: 5280
    - name: http-tls
      port: 5443
      targetPort: 5443
  type: ClusterIP

---
# MongoDB ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongo-config
  namespace: "player-xpress"
data:
  mongo-db: "ChatService"

---
# MongoDB PersistentVolumeClaim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-pvc
  namespace: "player-xpress"
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---
# MongoDB Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chat-mongodb-deployment
  namespace: "player-xpress"
  labels:
    app: mongodb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
        - name: mongodb
          image: registry.deti/player-xpress/chat_mongo:v1
          imagePullPolicy: IfNotPresent
          args:
            - "--bind_ip_all"
          env:
            - name: MONGO_INITDB_DATABASE
              valueFrom:
                configMapKeyRef:
                  name: mongo-config
                  key: mongo-db
          ports:
            - name: mongo
              containerPort: 27017
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"
          volumeMounts:
            - name: mongo-storage
              mountPath: /data/db
      volumes:
        - name: mongo-storage
          persistentVolumeClaim:
            claimName: mongo-pvc

---
# MongoDB Service
apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
  namespace: "player-xpress"
spec:
  selector:
    app: mongodb
  ports:
    - name: mongo
      port: 27017
      targetPort: 27017
  type: ClusterIP

---
# Flask App ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: flaskapp-config
  namespace: "player-xpress"
data:
  flask-host:       "0.0.0.0"
  flask-port:       "5000"
  mongo-uri:        "mongodb://mongodb-service:27017/"
  mongo-db:         "ChatService"
  ejabberd-api-url: "https://ejabberd-service:5443/api"
  muc-service:      "conference.ejabberd"
  
  jwt-secret-key:    ""
  api-key:           ""    # your code will fall back to its default
  
  admin-user:        "admin@ejabberd"
  admin-username:    "admin"
  admin-password:    "admin_password"
  vhost:             "ejabberd"

---
# Flask App Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chat-flaskapp-deployment
  namespace: "player-xpress"
  labels:
    app: flaskapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flaskapp
  template:
    metadata:
      labels:
        app: flaskapp
    spec:
      containers:
        - name: flaskapp
          image: registry.deti/player-xpress/chat_flask_app:v1
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 5000
          env:
            - name: FLASK_HOST
              valueFrom:
                configMapKeyRef:
                  name: flaskapp-config
                  key: flask-host
            - name: FLASK_PORT
              valueFrom:
                configMapKeyRef:
                  name: flaskapp-config
                  key: flask-port

            - name: MONGO_URI
              valueFrom:
                configMapKeyRef:
                  name: flaskapp-config
                  key: mongo-uri
            - name: MONGO_DB
              valueFrom:
                configMapKeyRef:
                  name: flaskapp-config
                  key: mongo-db

            - name: EJABBERD_API_URL
              valueFrom:
                configMapKeyRef:
                  name: flaskapp-config
                  key: ejabberd-api-url
            - name: MUC_SERVICE
              valueFrom:
                configMapKeyRef:
                  name: flaskapp-config
                  key: muc-service

            - name: JWT_SECRET_KEY
              valueFrom:
                configMapKeyRef:
                  name: flaskapp-config
                  key: jwt-secret-key
            - name: API_KEY
              valueFrom:
                configMapKeyRef:
                  name: flaskapp-config
                  key: api-key

            - name: ADMIN_USER
              valueFrom:
                configMapKeyRef:
                  name: flaskapp-config
                  key: admin-user
            - name: ADMIN_USERNAME
              valueFrom:
                configMapKeyRef:
                  name: flaskapp-config
                  key: admin-username
            - name: ADMIN_PASSWORD
              valueFrom:
                configMapKeyRef:
                  name: flaskapp-config
                  key: admin-password
            - name: VHOST
              valueFrom:
                configMapKeyRef:
                  name: flaskapp-config
                  key: vhost
          resources:
            requests:
              cpu:    "100m"
              memory: "128Mi"
            limits:
              cpu:    "500m"
              memory: "512Mi"
          readinessProbe:
            httpGet:
              path: /health
              port: 5000
            initialDelaySeconds: 5
            periodSeconds: 10

---
# Flask App Service
apiVersion: v1
kind: Service
metadata:
  name: flaskapp-service
  namespace: "player-xpress"
spec:
  selector:
    app: flaskapp
  ports:
    - name: http
      port: 5000
      targetPort: 5000
  type: ClusterIP

---
# Nginx Config for Frontend
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf-config
  namespace: "player-xpress"
data:
  nginx.conf: |
    worker_processes 1;
    events { worker_connections 1024; }

    http {
      include /etc/nginx/mime.types;
      default_type application/octet-stream;
      sendfile on;
      gzip on;

      server {
        listen 80;
        root /usr/share/nginx/html;
        index index.html;

        location / {
          try_files $uri $uri/ /index.html;
        }
        location ~* \.(?:css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
          try_files $uri =404;
          access_log off;
          add_header Cache-Control "public";
        }
        location /api/ {
          proxy_pass http://flaskapp-service:5000;
          proxy_http_version 1.1;
          proxy_set_header Host $host;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";
        }
        location /socket.io/ {
          proxy_pass http://flaskapp-service:5000/socket.io/;
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";
          proxy_set_header Host $host;
        }
      }
    }

---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chat-frontend-deployment
  namespace: "player-xpress"
  labels:
    app: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: nginx
          image: registry.deti/player-xpress/chat_frontend:v1
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 80
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "500m"
              memory: "256Mi"
          volumeMounts:
            - name: nginx-config-volume
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
      volumes:
        - name: nginx-config-volume
          configMap:
            name: nginx-conf-config

---
# Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: "player-xpress"
spec:
  selector:
    app: frontend
  ports:
    - name: http
      port: 80
      targetPort: 80
  type: LoadBalancer
