chat_groups_events.py
- Emit the request to the XMPP client
- Wait for the XMPP server's response
- Store the chat group in the database
- Emit the success event (chatGroupCreated) to notify all users

from flask_socketio import emit
import logging
from flask import current_app

class ChatGroupsEvents:
    
    def handle_create_chat(self, data):
        """
        Expected payload (CreateChatRequest):
        {
            "groupName": "Team Chat",
            "users": ["user1", "user2", "user3"]
        }
        """
        try:
            xmpp_client = current_app.config['xmpp_client']
            group_name = data.get('groupName')
            users = data.get('users')

            if len(users) < 2:
                raise ValueError("A chat group must have at least 2 users.")

            # ðŸ”´ STEP 1: Ask XMPP to create the group
            chat_jid = xmpp_client.create_chat_group(group_name, users)

            if not chat_jid:
                raise ValueError("Failed to create XMPP chat group.")

            # ðŸ”µ STEP 2: Store group in the database after XMPP confirmation
            chat_groups_service = current_app.config['chat_groups_service']
            chat_group = chat_groups_service.create_chat_group(group_name, users, chat_jid)

            response = {
                "chatId": str(chat_group["_id"]),
                "groupJid": chat_jid,
                "groupName": chat_group["groupName"],
                "users": chat_group["users"],
                "createdAt": chat_group["createdAt"]
            }

            # ðŸ”µ STEP 3: Notify users that the group was created
            emit('chatGroupCreated', response, broadcast=True)

        except Exception as e:
            logging.error(f"Chat group creation failed: {e}")
            emit('error', {'error': str(e)})

#-------------------------------------------------------------------

chat_groups_service.py

def create_chat_group(self, group_name: str, users: list[str], group_jid: str) -> dict:
    """Creates a new chat group after validation and stores the XMPP group JID."""
    
    validate_group_name(group_name)
    validate_users(users)

    chat_id = self.chat_groups_dal.create_chat_group(group_name, users, group_jid)

    if not chat_id:
        raise ValueError("Chat group not created")

    chat_group = self.chat_groups_dal.get_chat_group(group_name)

    if not chat_group:
        raise ValueError("Chat group not created")
    if chat_group["groupName"] != group_name:
        raise ValueError("Chat group name not set correctly")
    if chat_group["users"] != users:
        raise ValueError("Chat group users not set correctly")
    if chat_group["groupJid"] != group_jid:
        raise ValueError("Chat group JID not set correctly")

    return chat_group

#---------------------------------------------------------------------------

ChatGroupsDAL

def create_chat_group(self, group_name: str, users: list[str], group_jid: str) -> dict:
    """Insert a new chat group into the database with the XMPP Group JID."""
    chat_group = {
        "groupName": group_name,
        "users": users,
        "groupJid": group_jid,  # ðŸ”µ Store XMPP Group JID
        "createdAt": datetime.now(UTC).replace(tzinfo=None, microsecond=0)
    }
    result = self.chat_groups.insert_one(chat_group)
    return result.inserted_id